#pragma kernel CSMain

// Thread group size 
#define thread_group_size_x 10
#define thread_group_size_y 10
#define thread_group_size_z 10


float3 group_size = float3(5,5,5);

// Structure to store x,y,z position data in. This is used to populate the outputBuffer
struct positionStruct
{
    float3 pos;
	int renderface[6];
};

struct blockStruct{
	int On;
};

// Compute Buffers
RWStructuredBuffer<positionStruct> outputBuffer;
StructuredBuffer<blockStruct> mapBuffer;

[numthreads(thread_group_size_x, thread_group_size_y, thread_group_size_z)]
void CSMain (uint3 grpID : SV_GroupID, uint3 id : SV_DispatchThreadID, uint3 grpTID : SV_GroupThreadID, uint grpIdx : SV_GroupIndex)
{	
    int idx = id.x + (id.y * thread_group_size_x * group_size.x) + (id.z * thread_group_size_x * group_size.y * thread_group_size_y * group_size.z);


    float scale = 1;
 
	float3 pos = (id + grpTID + (grpID * float3(thread_group_size_x,thread_group_size_y,thread_group_size_z)));
	//float3 pos = (id + grpID + (grpTID * float3(thread_group_size_x,thread_group_size_y,thread_group_size_z)));

	//pos -= float3(50.5,50.5,50.5);

    outputBuffer[idx].pos =  pos * scale;

	int maxidx = thread_group_size_x * thread_group_size_y * thread_group_size_z * group_size.x * group_size.y * group_size.z;

	// Edge Rules
	int faces[6];

	for(int f = 0;f< 6;f++)
		faces[f] = 0;
	
	if(mapBuffer[idx].On == 1)
	{
		// Neigbour check.
		int top = id.x + ((id.y + 1) * thread_group_size_x * group_size.x) + (id.z * thread_group_size_x * group_size.y * thread_group_size_y * group_size.z);
		int bottom =  id.x + ((id.y -1) * thread_group_size_x * group_size.x) + (id.z * thread_group_size_x * group_size.y * thread_group_size_y * group_size.z);
		int left = (id.x + 1) + (id.y * thread_group_size_x * group_size.x) + (id.z * thread_group_size_x * group_size.y * thread_group_size_y * group_size.z);
		int right = (id.x - 1) + (id.y * thread_group_size_x * group_size.x) + (id.z * thread_group_size_x * group_size.y * thread_group_size_y * group_size.z);
		int front = id.x + (id.y * thread_group_size_x * group_size.x) + ((id.z-1) * thread_group_size_x * group_size.y * thread_group_size_y * group_size.z);
		int back = id.x + (id.y * thread_group_size_x * group_size.x) + ((id.z+1) * thread_group_size_x * group_size.y * thread_group_size_y * group_size.z);

		// Is there anyone above me?
		if(front >= 0 && front < maxidx && mapBuffer[front].On == 0)
			faces[0] = 1;

		// anyone to my left?
		if(left >= 0 && left < maxidx && mapBuffer[left].On == 0)
			faces[1] = 1;

		// anyone to my right?
		if(right >= 0 && right < maxidx && mapBuffer[right].On == 0)
			faces[2] = 1;

		// anyone behind me?
		if(back >= 0 && back < maxidx && mapBuffer[back].On == 0)
			faces[3] = 1;

		// Anyone above me?
		if(top >= 0 && top < maxidx && mapBuffer[top].On == 0)
			faces[4] = 1;

		// anyoen beow me?
		if(bottom >= 0 && bottom < maxidx && mapBuffer[bottom].On == 0)
			faces[5] = 1;

		
		// Outer Edge Case.
		if(id.z == 0)
			faces[0] = 1; // Front
		
		if(id.x == (thread_group_size_x * group_size.x) - 1)
			faces[1] = 1; // Left

		if(id.x == 0)
			faces[2] = 1; // Right

		if(id.z == (thread_group_size_z * group_size.z) - 1)
			faces[3] = 1; // Back

		if(id.y == (thread_group_size_y * group_size.y) - 1)
			faces[4] = 1; // Top

		if(id.y == 0)
			faces[5] = 1; // Bottom
		
	}

	outputBuffer[idx].renderface = faces;
}